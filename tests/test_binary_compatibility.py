"""Test binary compatibility with reference hdiffz binaries.

Note: These tests check if our Python wrapper generates exactly the same
binary output as the hdiffz v4.8.0 command-line tool. Differences may occur
due to:
- Different HDiffPatch library versions
- Different build configurations
- Different default compression parameters
- Format header differences

The tests verify functional compatibility (diffs can be applied correctly)
and check for significant size differences while documenting any binary
format variations.
"""

from pathlib import Path

import pytest

import hdiffpatch


@pytest.fixture
def test_binaries_dir():
    """Path to the test binaries directory."""
    return Path(__file__).parent / "binaries"


@pytest.fixture
def firmware_files(test_binaries_dir):
    """Load the firmware binary files."""
    old_file = test_binaries_dir / "RPI_PICO-20241129-v1.24.1.uf2"
    new_file = test_binaries_dir / "RPI_PICO-20250415-v1.25.0.uf2"

    with old_file.open("rb") as f:
        old_data = f.read()
    with new_file.open("rb") as f:
        new_data = f.read()

    return {"old": old_data, "new": new_data}


@pytest.fixture
def reference_diffs(test_binaries_dir):
    """Load the reference diff files generated by hdiffz."""
    diff_files = {
        "uncompressed": test_binaries_dir / "RPI_PICO-20241129-v1.24.1_to_RPI_PICO-20250415-v1.25.0.hdiff",
        "zlib": test_binaries_dir / "RPI_PICO-20241129-v1.24.1_to_RPI_PICO-20250415-v1.25.0.hdiff.zlib",
        "lzma": test_binaries_dir / "RPI_PICO-20241129-v1.24.1_to_RPI_PICO-20250415-v1.25.0.hdiff.lzma",
    }

    reference_data = {}
    for compression_type, file_path in diff_files.items():
        with file_path.open("rb") as f:
            reference_data[compression_type] = f.read()

    return reference_data


# Test parameters: (compression_constant, reference_key, description)
COMPRESSION_TEST_PARAMS = [
    (hdiffpatch.COMPRESSION_NONE, "uncompressed", "uncompressed"),
    (hdiffpatch.COMPRESSION_ZLIB, "zlib", "zlib"),
    (hdiffpatch.COMPRESSION_LZMA, "lzma", "lzma"),
]


@pytest.mark.parametrize("compression_type,reference_key,description", COMPRESSION_TEST_PARAMS)
def test_diff_matches_reference(firmware_files, reference_diffs, compression_type, reference_key, description):
    """Test that generated diff matches hdiffz reference for all compression types."""
    generated_diff = hdiffpatch.diff(firmware_files["old"], firmware_files["new"], compression=compression_type)

    reference_diff = reference_diffs[reference_key]

    # First check if lengths are close (allowing for minor differences in formatting)
    len_diff = abs(len(generated_diff) - len(reference_diff))
    max_allowed_diff = max(len(reference_diff) // 100, 100)  # Allow 1% or 100 bytes difference

    if len_diff > max_allowed_diff:
        pytest.fail(
            f"Generated {description} diff length ({len(generated_diff)} bytes) "
            f"differs significantly from reference ({len(reference_diff)} bytes). "
            f"Difference: {len_diff} bytes"
        )

    # If lengths are similar, check if they're exactly equal
    if generated_diff != reference_diff:
        # Find first difference for debugging
        min_len = min(len(generated_diff), len(reference_diff))
        first_diff = next((i for i in range(min_len) if generated_diff[i] != reference_diff[i]), min_len)

        pytest.fail(
            f"Generated {description} diff differs from reference at byte {first_diff}. "
            f"Generated: {len(generated_diff)} bytes, Reference: {len(reference_diff)} bytes. "
            f"Note: Binary compatibility may depend on hdiffz version and build configuration."
        )


@pytest.mark.parametrize("compression_type", [key for _, key, _ in COMPRESSION_TEST_PARAMS])
def test_reference_diff_can_be_applied(firmware_files, reference_diffs, compression_type):
    """Test that reference diff can be successfully applied for all compression types."""
    old_data = firmware_files["old"]
    new_data = firmware_files["new"]
    diff_data = reference_diffs[compression_type]

    result = hdiffpatch.apply(old_data, diff_data)
    assert result == new_data, f"Reference {compression_type} diff did not reconstruct new data correctly"


@pytest.mark.parametrize("compression_type", [comp for comp, _, _ in COMPRESSION_TEST_PARAMS])
def test_generated_diff_can_be_applied(firmware_files, compression_type):
    """Test that our generated diff can be successfully applied for all compression types."""
    old_data = firmware_files["old"]
    new_data = firmware_files["new"]

    generated_diff = hdiffpatch.diff(old_data, new_data, compression=compression_type)
    result = hdiffpatch.apply(old_data, generated_diff)
    assert result == new_data, f"Generated {compression_type} diff did not reconstruct new data correctly"


def test_all_reference_diffs_can_be_applied_batch(firmware_files, reference_diffs):
    """Test that all reference diffs can be successfully applied in batch."""
    old_data = firmware_files["old"]
    new_data = firmware_files["new"]

    for compression_type, diff_data in reference_diffs.items():
        result = hdiffpatch.apply(old_data, diff_data)
        assert result == new_data, f"Reference {compression_type} diff did not reconstruct new data correctly"
